#############################
# Tarasov 2019
# Template for PARAMO pipeline
#
#
#############################

#######################
# Reading in the Data #
#######################

# names to declare
analysis_name = "urohyal+urohyal_lateral_process+urohyal_median_process"
tree_2_read= "data/fishtree.tre"
chrs_2_read= "data/urohyal+urohyal_lateral_process+urohyal_median_process.char"


# variables to be predifined in this template
mcmc_gen = 10000
#burnin_gen = 2000
log_freq = 100

#seed(2555)

# moves and monitors
mvi = 0
mni = 0

# variable obtained from scipt
NUM_STATES = 8
# arg of readCharacterDataDelimited()


# Read in the character data
char_data = readCharacterDataDelimited(chrs_2_read, type="NaturalNumbers", delimiter=" ", stateLabels = NUM_STATES, headers=false)
# Read in tree
psi = readTrees(tree_2_read)[1]




#######################
# Character Evolution Model
#######################

# declare rate matrix

NUM_STATES=8
for (i in 1:NUM_STATES) {
  for (j in 1:NUM_STATES) {
      rates[i][j] <-0.0
  }
}
r5~dnExp(20)
r14~dnExp(20)
r23~dnExp(20)
r32~dnExp(20)
r33~dnExp(20)
r38~dnExp(20)
r39~dnExp(20)
r42~dnExp(20)
r45~dnExp(20)
r48~dnExp(20)
r51~dnExp(20)
r53~dnExp(20)
r56~dnExp(20)
r60~dnExp(20)
r62~dnExp(20)
r63~dnExp(20)
moves[++mvi] = mvScale(r5, lambda=1, tune=true, weight=2)
moves[++mvi] = mvScale(r14, lambda=1, tune=true, weight=2)
moves[++mvi] = mvScale(r23, lambda=1, tune=true, weight=2)
moves[++mvi] = mvScale(r32, lambda=1, tune=true, weight=2)
moves[++mvi] = mvScale(r33, lambda=1, tune=true, weight=2)
moves[++mvi] = mvScale(r38, lambda=1, tune=true, weight=2)
moves[++mvi] = mvScale(r39, lambda=1, tune=true, weight=2)
moves[++mvi] = mvScale(r42, lambda=1, tune=true, weight=2)
moves[++mvi] = mvScale(r45, lambda=1, tune=true, weight=2)
moves[++mvi] = mvScale(r48, lambda=1, tune=true, weight=2)
moves[++mvi] = mvScale(r51, lambda=1, tune=true, weight=2)
moves[++mvi] = mvScale(r53, lambda=1, tune=true, weight=2)
moves[++mvi] = mvScale(r56, lambda=1, tune=true, weight=2)
moves[++mvi] = mvScale(r60, lambda=1, tune=true, weight=2)
moves[++mvi] = mvScale(r62, lambda=1, tune=true, weight=2)
moves[++mvi] = mvScale(r63, lambda=1, tune=true, weight=2)
rates[1][5]:=r5
rates[2][6]:=r14
rates[3][7]:=r23
rates[4][8]:=r32
rates[5][1]:=r33
rates[5][6]:=r38
rates[5][7]:=r39
rates[6][2]:=r42
rates[6][5]:=r45
rates[6][8]:=r48
rates[7][3]:=r51
rates[7][5]:=r53
rates[7][8]:=r56
rates[8][4]:=r60
rates[8][6]:=r62
rates[8][7]:=r63

rate_matrix := fnFreeK(transition_rates=rates, rescaled=false, matrixExponentialMethod="eigen")
root_freq <- simplex(1 ,1 ,1 ,1 ,1 ,1 ,1 ,1)


###############
# create the model
###############
morpho_ctmc ~ dnPhyloCTMC(Q=rate_matrix, tree=psi, rootFreq=root_freq, branchRates=1.0, type="NaturalNumbers")

# clamp data
morpho_ctmc.clamp(char_data)

### workspace model wrapper ###
mymodel = model(rate_matrix)

# create the monitors
# model param to file monitor
monitors[++mni] = mnModel(filename="output/" + analysis_name + ".log", printgen=log_freq)
# model param to screen monitor
monitors[++mni] = mnScreen(printgen=log_freq)
# tree monitor fro treetrace awith Stocj mapping
#monitors[++mni] = mnFile(filename="output/mk1.trees", printgen=10, psi)
monitors[++mni] = mnJointConditionalAncestralState(filename="output/" + analysis_name + ".asr", printgen=1000, tree=psi, ctmc=morpho_ctmc, type="NaturalNumbers")
# Stoch mapping monitor
monitors[++mni]= mnStochasticCharacterMap(ctmc=morpho_ctmc, filename="output/" + analysis_name + ".stm", printgen=1000)


###############
# run MCMC analysis
###############
mymcmc = mcmc(mymodel, monitors, moves, nruns=1, moveschedule="random")

### pre-burnin to tune the proposals
mymcmc.burnin(generations=3000, tuningInterval=1000)

### run the MCMC
mymcmc.run(mcmc_gen)

mymcmc.operatorSummary()


#######################################
