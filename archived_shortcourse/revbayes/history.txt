#burnin_gen = 2000
log_freq = 100
#seed(2555)
# moves and monitors
mvi = 0
mni = 0
# variable obtained from scipt
NUM_STATES = 8
# arg of readCharacterDataDelimited()
# Read in the character data
char_data = readCharacterDataDelimited(chrs_2_read, type="NaturalNumbers", delimiter=" ", stateLabels = NUM_STATES, headers=false)
# Read in tree
psi = readTrees(tree_2_read)[1]
#######################
# Character Evolution Model
#######################
# declare rate matrix
NUM_STATES=8
for (i in 1:NUM_STATES) {
  for (j in 1:NUM_STATES) {
      rates[i][j] <-0.0
  }
}
r5~dnExp(20)
r14~dnExp(20)
r23~dnExp(20)
r32~dnExp(20)
r33~dnExp(20)
r38~dnExp(20)
r39~dnExp(20)
r42~dnExp(20)
r45~dnExp(20)
r48~dnExp(20)
r51~dnExp(20)
r53~dnExp(20)
r56~dnExp(20)
r60~dnExp(20)
r62~dnExp(20)
r63~dnExp(20)
moves[++mvi] = mvScale(r5, lambda=1, tune=true, weight=2)
moves[++mvi] = mvScale(r14, lambda=1, tune=true, weight=2)
moves[++mvi] = mvScale(r23, lambda=1, tune=true, weight=2)
moves[++mvi] = mvScale(r32, lambda=1, tune=true, weight=2)
moves[++mvi] = mvScale(r33, lambda=1, tune=true, weight=2)
moves[++mvi] = mvScale(r38, lambda=1, tune=true, weight=2)
moves[++mvi] = mvScale(r39, lambda=1, tune=true, weight=2)
moves[++mvi] = mvScale(r42, lambda=1, tune=true, weight=2)
moves[++mvi] = mvScale(r45, lambda=1, tune=true, weight=2)
moves[++mvi] = mvScale(r48, lambda=1, tune=true, weight=2)
moves[++mvi] = mvScale(r51, lambda=1, tune=true, weight=2)
moves[++mvi] = mvScale(r53, lambda=1, tune=true, weight=2)
moves[++mvi] = mvScale(r56, lambda=1, tune=true, weight=2)
moves[++mvi] = mvScale(r60, lambda=1, tune=true, weight=2)
moves[++mvi] = mvScale(r62, lambda=1, tune=true, weight=2)
moves[++mvi] = mvScale(r63, lambda=1, tune=true, weight=2)
rates[1][5]:=r5
rates[2][6]:=r14
rates[3][7]:=r23
rates[4][8]:=r32
rates[5][1]:=r33
rates[5][6]:=r38
rates[5][7]:=r39
rates[6][2]:=r42
rates[6][5]:=r45
rates[6][8]:=r48
rates[7][3]:=r51
rates[7][5]:=r53
rates[7][8]:=r56
rates[8][4]:=r60
rates[8][6]:=r62
rates[8][7]:=r63
rate_matrix := fnFreeK(transition_rates=rates, rescaled=false, matrixExponentialMethod="eigen")
root_freq <- simplex(1 ,1 ,1 ,1 ,1 ,1 ,1 ,1)
morpho_ctmc ~ dnPhyloCTMC(Q=rate_matrix, tree=psi, rootFreq=root_freq, branchRates=1.0, type="NaturalNumbers")
morpho_ctmc.clamp(char_data)
morpho_ctmc.methods()
morpho_ctmc.lnProbability()
q()
source("pectoral_fin+pectoral_fin_lepidotrichium+pectoral_fin_spine+anterior_dentation_of_pectoral_fin_spine+posterior_dentation_of_pectoral_fin_spine.Rev")
chrs_2_read= "data/pectoral_fin+pectoral_fin_lepidotrichium+pectoral_fin_spine+anterior_dentation_of_pectoral_fin_spine+posterior_dentation_of_pectoral_fin_spine.char"
chrs_2_read
# variables to be predifined in this template
mcmc_gen = 10000
#burnin_gen = 2000
log_freq = 100
#seed(2555)
# moves and monitors
mvi = 0
mni = 0
# variable obtained from scipt
NUM_STATES = 32
# arg of readCharacterDataDelimited()
# Read in the character data
char_data = readCharacterDataDelimited(chrs_2_read, type="NaturalNumbers", delimiter=" ", stateLabels = NUM_STATES, headers=false)
# Read in tree
psi = readTrees(tree_2_read)[1]
char_data
char_data.methods()
char_data.show()
q()
